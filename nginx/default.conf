server_names_hash_bucket_size 64;
proxy_headers_hash_bucket_size 512;
server_names_hash_max_size 512;
large_client_header_buffers 8 64k;
proxy_read_timeout 3600;
proxy_connect_timeout 3600;


# include configs for spamers, bad bots to reject
include /customization/extra.conf;
include /customization/blacklist.conf;

# Rate limit configurations
limit_req_zone $binary_remote_addr zone=all:10m rate=4r/s;
limit_req_zone $binary_remote_addr zone=admin:10m rate=400r/s;


# Add geoip rate limiting for countries
# NOTE: this is added in the nginx.conf file

# Create rate limiting zone using the rate_limit variable
# limit_req_zone $geoip2_data_country_code zone=geo_limit:10m rate=$limit_per_country;
map $geoip2_data_country_code $throttle_level {
    default     "high";
    US          "low";
    CA          "low";
    AU          "medium";
    DE          "medium";
    EC          "medium";
    EG          "medium";
    FR          "medium";
    GB          "medium";
    GR          "medium";
    JO          "medium";
    IT          "medium";
    NZ          "medium";
    TR          "medium";
    TW          "medium";
    UA          "medium";
    CN          "veryhigh";
    RU          "veryhigh";
}
map $throttle_level $throttle_level_veryhigh {
    default 0;
    veryhigh 1;
}

map $throttle_level $throttle_level_high {
    default 0;
    high 1;
}

map $throttle_level $throttle_level_medium {
    default 0;
    medium 1;
}

map $throttle_level $throttle_level_low {
    default 0;
    low 1;
}

limit_req_zone $throttle_level_veryhigh zone=geo_thr_veryhigh:10m rate=2r/s;
limit_req_zone $throttle_level_high zone=geo_thr_high:10m rate=4r/s;
limit_req_zone $throttle_level_medium zone=geo_thr_medium:10m rate=8r/s;
limit_req_zone $throttle_level_low zone=geo_thr_low:10m rate=15r/s;


# Rate limit AI using browsers
map $slow_down_client $addr_to_limit {
    0  "";
    1  $binary_remote_addr;  
}
limit_req_zone $addr_to_limit zone=ai_bots:10m rate=1r/m;

map $http_user_agent $limit_bots {
    default '';
    ~*(google|bing|yandex|msnbot|baidu|crawler|robot|turnitin|bot|spider|slurp|teoma|findlink|heritrix|findthatfile|ahrefs) $binary_remote_addr;
}
limit_req_zone $limit_bots zone=bots:10m rate=2r/m;

map $http_user_agent $limit_oai {
    default '';
    ~*(oai|OAI|harvester|Harvester|jakarta|Jakarta|darwin|Darwin|Go-http-client|pyoai|jeroen|python-requests) $binary_remote_addr;
}
limit_req_zone $limit_oai zone=oai:10m rate=2r/m;
limit_req_status 429;

limit_req_zone $binary_remote_addr zone=admin_limit:10m rate=2r/m;


log_format geo_main     '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '-- $geoip2_data_country_code --';


# Connect to the Open Context Django app running with
# Gunicorn. Note, you need to match more than the port
# number, you need match the Docker container NAME where
# we've launched the Open Context Djagno app.
upstream django {
  server oc:8000;
}



server {
    listen 80;
    charset utf-8;
    server_name ${DEPLOY_HOST} www.${DEPLOY_HOST};

    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        autoindex on;
        allow all;
        root /var/www/certbot/$host;
    }

    access_log /logs/nginx/access.log;
    error_log /logs/nginx/error.log;

    proxy_read_timeout 3600;

    proxy_set_header  X-Forwarded-Protocol  $scheme;
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/ld+json
application/geo+json text/xml application/xml application/xml+rss
text/javascript application/javascript text/turtle;
    # block the evil spammers and bad bots
    if ($bad_referer) {
       return 444;
    }
    if ($bad_bot) {
        return 444;
    }
    if ($bad_referer_block) {
        return 444;
    }
    if ($bad_urls1) {
        return 403;
    }
    if ($bad_urls2) {
        return 403;
    }
    if ($bad_urls3) {
        return 403;
    }
    if ($bad_urls4) {
        return 403;
    }
    if ($bad_urls5) {
        return 403;
    }
    if ($bad_urls6) {
        return 403;
    }

    location /.nginx {
        alias /var/www/html/${DEPLOY_HOST};
    }

    location / {
        return 301 https://${DEPLOY_HOST}$request_uri;
    }

}


server {
    listen       443 ssl;

    server_name ${DEPLOY_HOST} www.${DEPLOY_HOST};
    access_log /logs/nginx/ssl_access.log geo_main;
    error_log /logs/nginx/ssl_error.log;

    proxy_set_header  X-Forwarded-Protocol  $scheme;
    proxy_read_timeout 3600;

    ssl_certificate /etc/symb_link_ssl/fullchain.pem;
    ssl_certificate_key /etc/symb_link_ssl/privkey.pem;

    include /etc/nginx/options-ssl-nginx.conf;

    ssl_dhparam /etc/nginx/sites/ssl/ssl-dhparams.pem;

    include /etc/nginx/hsts.conf;

    

    # block the evil spammers and bad bots
    if ($bad_referer) {
       # return 444;
    }
    if ($bad_bot) {
        return 444;
    }
    if ($bad_agents) {
        return 444;
    }
    if ($bad_referer_block) {
        # return 444;
    }
    if ($bad_urls1) {
        return 403;
    }
    if ($bad_urls2) {
        return 403;
    }
    if ($bad_urls3) {
        return 403;
    }
    if ($bad_urls4) {
        return 403;
    }
    if ($bad_urls5) {
        return 403;
    }
    if ($bad_urls6) {
        return 403;
    }

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/ld+json
application/geo+json text/xml application/xml application/xml+rss
text/javascript application/javascript text/html text/turtle;

    location /.nginx {
        root     /var/www/html/opencontext.org;
    }

    # See the nginx docker-compose.yml where we
    # provide this volume mapping to "static"
    location  /static/ {
        # Note: No rate limit
        add_header Cache-Control "max-age=86400, public";
        autoindex on;
        alias  /static_root/;
    }

    location /editorial/ {
        # No rate limits for editorial
        limit_req zone=admin burst=30 nodelay;
        try_files $uri @proxy_to_django_oc;
    }

    location /admin {
        limit_req zone=admin_limit burst=5 nodelay;
        try_files $uri @proxy_to_django_oc;
    }

    location / {
        
        # general rate limit
        limit_req zone=all burst=25 nodelay;

        # rate limit per country
        # Apply rate limits based on the throttle level
        limit_req zone=geo_thr_veryhigh burst=25 nodelay;
        limit_req zone=geo_thr_high burst=25 nodelay;
        limit_req zone=geo_thr_medium burst=25 nodelay;
        limit_req zone=geo_thr_low burst=25 nodelay;

        # DEACTIVATE 2024-02-11: limit_req zone=ai_bots burst=3;
        limit_req zone=bots burst=3;
        limit_req zone=oai burst=3;

        try_files $uri @proxy_to_django_oc;
    }

    location @proxy_to_django_oc {
        proxy_pass http://django;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Country $geoip2_data_country_code;

        if ($request_uri ~* \.(json)){
            # this DOES work
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;
        }

        if ($http_accept ~* \/(json)){
            # this DOES work
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;
        }
        if ($http_accept ~* \/(ld+json)){
            # this DOES work
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;
        }
        if ($http_accept ~* \/(vnd.geo+json)){
            # this DOES work
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;
        }
    }


}
